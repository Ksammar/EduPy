# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к
# клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого)
# деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
from math import ceil


class Cell:
    def __init__(self, cells):
        self.count = cells
        self._cell = '*'

    def __add__(self, other):
        return Cell(self.count + other.count)

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __sub__(self, other):
        if (self.count - other.count) < 0:
            print('Нельзя выполнить вычитание, недостаточно ячеек в первой клетке')
            return Cell(self.count)
        else:
            return Cell(self.count - other.count)

    def __floordiv__(self, other):
        if other.count > 0:
            return Cell(self.count // other.count)
        else:
            print('недостаточно ячеек в клетке')
            return Cell(self.count)

    def __truediv__(self, other):
        return self.__floordiv__(other)

    def __iadd__(self, other):
        return self.__add__(other)

    def __isub__(self, other):
        return self.__sub__(other)

    def make_order(self, count_row):
        counter = 0
        cel = ''
        for i in range(self.count - 1):
            cel += self._cell
            counter += 1
            if counter >= count_row:
                cel += '\n'
                counter = 0
        cel += self._cell
        return cel


cell1 = Cell(12)
cell2 = Cell(10)
a = cell1.make_order(4)
b = cell2.make_order(4)
print(cell1.make_order(4))
print('')
print(cell2.make_order(6))
print('')
print((cell1 + cell2).make_order(7))


